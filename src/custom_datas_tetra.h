#ifndef CUSTOMDATASTETRA_FILE
#define CUSTOMDATASTETRA_FILE

typedef enum{
	DADO_INVISIBLE,
	DADO_WAITING,
	ROLLING_SUPERFAST,
	ROLLING_FAST,
	ROLLING_SLOW,
	ANTICIPATION,
	DADO_FACE,
	DADO_SELECTED_PLAYER,
	DADO_SELECTED_ENEMY,
	DADO_GOING_PLAYER,
	DADO_GOING_ENEMY,
	PASSWORD
}TETRA_DADO_STATE;

typedef enum{
	FACCIA_UP,//FACCIA_UP,
	FACCIA_BLAIR,//FACCIA_BLAIR,
	FACCIA_ARROWS,//FACCIA_ARROWS,
	FACCIA_SHIELD//FACCIA_SHIELD
}TETRA_DADO_FACCE;

struct TetradadoInfo{
	TETRA_DADO_STATE tetradado_state;
	TETRA_DADO_FACCE tetradado_faccia;
	UINT8 rolling_counter;
	UINT8 face_counter;
	UINT8 initial_x;
	UINT8 initial_y;
};

typedef enum{
	CURSOR_INVISIBLE,
	TRIANGLE_BLINK,
	TRIANGLE_FULL,
	TRIANGLE_EMPTY,
	HAND_OPENED,
	HAND_CLOSED
}TETRACURSOR_STATE;

struct TetracursorInfo{
	TETRACURSOR_STATE cursor_state;
};

typedef enum{
  INIT_GAME,
  START_GAME,
  RETURN_TO_PLACE,
  TURN_MAKE_DRAGONS,
  TURN_MAKE_DICE,
  TURN_PICK_DICE,
  TURN_PICK_DRAGON,
  TURN_BUY_DRAGON,
  WINNER,
  LOSER
}TETRA_GAME_STATE;

typedef enum{
  TURN_PLAYER,
  TURN_CAPTAIN
}TETRA_TURN;

struct DRAGON_COSTS{
  UINT8 up_cost;
  UINT8 blair_cost;
  UINT8 arrows_cost;
  UINT8 shield_cost;
};

typedef enum{
  NONE,
  PLAY,
  READ_INSTRUCTIONS
}TETRA_CAMERA_STATE;

#endif
